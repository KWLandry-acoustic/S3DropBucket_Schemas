{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Master S3DropBucket Customer Config Schema",
  "description": "S3DropBucket Master Customer Config Schema",
  "type": "object",
  "required": [
    "selectivelogging",
    "Customer",
    "format",
    "separator",
    "updates",
    "targetupdate",
    "updatemaxrows",
    "updatetype",
    "transforms"
  ],
  "properties": {
    "Customer": {
      "type": "string",
      "description": "DataFlow Name - Best Practice 'CustomerName_DataflowName_'",
      "default": "CustomerDataFlow1_",
      "minLength": 3
    },
    "selectivelogging": {
      "type": "string",
      "description": "Override Selective Logging for this Customers DataFlow",
      "default": "",
      "minLength": 0
    },
    "format": {
      "type": "string",
      "description": "Inbound data is in the format of CSV or JSON data",
      "default": "json",
      "minLength": 3,
      "enum": [
        "json",
        "csv"
      ]
    },
    "separator": {
      "type": "string",
      "description": "Inbound data has this seperator (When different than the default for that type, JSON should the default of '\\n')",
      "default": "\n",
      "minLength": 1,
      "enum": [
        ",",
        "|",
        "\n"
      ]
    },
    "targetupdate": {
      "type": "string",
      "description": "The data is to be written to Connect or Campaign",
      "minLength": 7,
      "maxLength": 8,
      "default": "Connect",
      "enum": [
        "Campaign",
        "Connect"
      ]
    },
    "updates": {
      "type": "string",
      "description": "Inbound data is made up of small continuous updates, Singular or arrives in bulk, Multiple updates",
      "minLength": 8,
      "maxLength": 8,
      "default": "Multiple",
      "enum": [
        "Singular",
        "Multiple"
      ]
    },
    "updatemaxrows": {
      "type": "number",
      "description": "Emit a Safety Warning when the rows of any single inbound update exceeds this value",
      "default": 1000,
      "minimum": 10
    },
    "updatetype": {
      "type": "string",
      "description": "The dataflow update-type to be used for the Connect or Campaign Org. Update as Relational, DBKeyed, DBNonKeyed, ReferenceSet, CreateContacts, UpdateContacts",
      "minLength": 7,
      "maxLength": 14,
      "default": "Relational",
      "enum": [
        "Relational",
        "DBKeyed",
        "DBNonKeyed",
        "ReferenceSet",
        "CreateContacts",
        "UpdateContacts"
      ]
    },
    "lookupkeys": {
      "type": "array",
      "description": "When updatetype is DBNonKeyed, what are the LookUp Keys to be used to update records (use a comma seperated list between the brackets) ",
      "minLength": 0,
      "maxLength": 50,
      "default": "[]"
    },
    "updatecontactskey": {
      "type": "string",
      "description": "When 'updatetype' is ReferenceSet, CreateContacts, or UpdateContacts what is the attribute to be used as the key to update data by.",
      "minLength": 0,
      "default": "email"
    },
    "listid": {
      "type": "string",
      "description": "When updatetype is Relational, DBKeyed, or DBNonKeyed what is the target listid to be updated",
      "minLength": 0,
      "default": ""
    },
    "listname": {
      "type": "string",
      "minLength": 0,
      "default": ""
    },
    "pod": {
      "type": "string",
      "description": "When updatetype is Relational, DBKeyed, or DBNonKeyed what is the Acoustic POD number for the Customer Org.",
      "optional": true,
      "minLength": 0,
      "maxLength": 1,
      "enum": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "A",
        "B"
      ],
      "default": "0"
    },
    "region": {
      "type": "string",
      "description": "When updatetype is Relational, DBKeyed, or DBNonKeyed what is the Acoustic Region for the Customers Org.",
      "default": "us",
      "minLength": 0,
      "maxLength": 2,
      "enum": [
        "us",
        "eu",
        "ap",
        "ca"
      ]
    },
    "clientid": {
      "type": "string",
      "description": "When updatetype is Relational, DBKeyed, or DBNonKeyed what is the Acoustic App Access ClientId for the Customers Org.",
      "minLength": 0,
      "default": ""
    },
    "clientsecret": {
      "type": "string",
      "description": "When updatetype is Relational, DBKeyed, or DBNonKeyed what is the Acoustic App Access ClientSecret for the Customers Org.",
      "minLength": 0,
      "default": ""
    },
    "refreshtoken": {
      "type": "string",
      "description": "When updatetype is Relational, DBKeyed, or DBNonKeyed what is the Acoustic App Access RefreshToken for the Customers Org.",
      "minLength": 0,
      "default": ""
    },
    "datasetid": {
      "type": "string",
      "description": "When 'updatetype' is ReferenceSet, CreateContacts, or UpdateContacts what is the target datasetid to be updated",
      "minLength": 0,
      "default": ""
    },
    "subscriptionid": {
      "type": "string",
      "description": "When 'updatetype' is ReferenceSet, CreateContacts, or UpdateContacts what is the Customers SubscriptionId of their Connect Org",
      "minLength": 0,
      "default": ""
    },
    "x_api_key": {
      "type": "string",
      "description": "When 'updatetype' is ReferenceSet, CreateContacts, or UpdateContacts what is the Connect API x_api_key of their Connect Org (currently its the same value for all Connect Orgs)",
      "minLength": 0,
      "default": ""
    },
    "x_acoustic_region": {
      "type": "string",
      "description": "When 'updatetype' is ReferenceSet, CreateContacts, or UpdateContacts what is the Customers AWS Region Id of their Connect Org",
      "default": "us-east-1",
      "enum": [
        "us-east-1",
        "us-east-2",
        "us-west-1",
        "us-west-2",
        "af-south-1",
        "ap-east-1",
        "ap-south-1",
        "ap-south-2",
        "ap-southeast-1",
        "ap-southeast-2",
        "ap-southeast-3",
        "ap-southeast-4",
        "ap-northeast-1",
        "ap-northeast-2",
        "ap-northeast-3",
        "ca-central-1",
        "eu-central-1",
        "eu-central-2",
        "eu-north-1",
        "eu-south-1",
        "eu-south-2",
        "eu-west-1",
        "eu-west-2",
        "eu-west-3",
        "il-central-1",
        "me-central-1",
        "me-south-1",
        "sa-east-1"
      ],
      "minLength": 0
    },
    "transforms": {
      "type": "object",
      "description": "Transformations to be applied to the inbound data. These are all Optional, use empty values to not apply the transformation. Options include Audience status, Consent status, unique methods, jsonmapping, csvmapping, and ignore columns",
      "required": [
        "audienceupdate",
        "channelconsent",
        "reservedJSON",
        "reservedCSV",
        "methods",
        "jsonmap",
        "csvmap",
        "ignore"
      ],
      "properties": {
        "channelconsent": {
          "type": "object",
          "description": "Optional, Consent(s) to be associated with this stream of data (dataflow) (see also JSONMap and CSVMap), specify up to 50 Audiences, where the first param is the Audience Name and the second param the value to be recorded as the Audience Status.",
          "minLength": 0,
          "maxLength": 50,
          "properties": {
            "Channel1": {
              "type": "string",
              "minLength": 3
            },
            "Channel2": {
              "type": "string",
              "minLength": 3
            }
          },
          "default": {
            "Email": "ConsentColumn1",
            "SMS": "ConsentColumn2"
          }
        },
        "audienceupdate": {
          "type": "object",
          "description": "Optional, Audience(s) to be associated with this stream of data (dataflow), specify up to 50 Consents, where the first param is the Consent Channel Name and the second param the value to be recorded as the Audience Status.",
          "minLength": 0,
          "maxLength": 50,
          "properties": {
            "AudienceXYZ": {
              "type": "string",
              "minLength": 3
            },
            "AudienceABC": {
              "type": "string",
              "minLength": 3
            }
          },
          "default": {
            "AudienceXYZ": "AudienceColumn1",
            "AudienceABC": "AudienceColumn2"
          }
        },
        "methods": {
          "type": "object",
          "description": "Transform code for specific transforms. For each Method an empty Value indicates to Not perform the Transformation ie. daydate: \"\".",
          "properties": {
            "daydate": {
              "type": "string",
              "description": "Optional. Add a Column of the Day of the Week (Monday, Tuesday, Wednesday, etc.... based on the defined Column in the data. The Column defined must contain a valid Date value. Leave value(s) empty to not apply the transform.",
              "minLength": 0
            },
            "method2": {
              "type": "string",
              "description": "Optional. A Placeholder for future Transformation Methods. Leave value(s) empty to not apply the transform.",
              "minLength": 0
            }
          },
          "required": [
            "daydate"
          ],
          "default": {
            "daydate": ""
          }
        },
        "jsonmap": {
          "type": "object",
          "description": "Optional. Write a New Column with the value from the JSON data, specified using a JSONPath statement. Use a JSONPath editor and a sample of the data to determine the statement needed. Leave value(s) empty to not apply the transform.",
          "properties": {
            "Col1": {
              "type": "string",
              "minLength": 0
            },
            "Col2": {
              "type": "string",
              "minLength": 0
            }
          },
          "default": {
            "Col1": "",
            "Col2": ""
          }
        },
        "reservedjson": {
          "type": "object",
          "description": "Optional. Provides a Reference to data in the datafile to be used for Update/Create Statement parameters but ignored as update data.",          
          "properties": {
            "Audience": {
              "type": "array",
              "minLength": 0
            },
            "Channel": {
              "type": "array",
              "minLength": 0
            },
            "ContactKey": {
              "type": "string",
              "minLength": 0
            },
            "ContactId": {
              "type": "string",
              "minLength": 0
            }
          },
          "default": {
            "Audience": [
              {"AudienceX1": "$.audience"},
              {"AudienceABC2": "$.audienceABC2value"}
            ],
            "Channel": [
              {"EmailChannel": "$.emailconsentvalue"},
              {"Channel2": "$.channel2consentvalue"}
            ],
            "ContactKey": "$.contactKeyvalue",
            "ContactId": "$.uniqueId"
          }
        },
        "reservedcsv": {
          "type": "object",
          "description": "Optional. Provides a Reference to data in the datafile to be used for Update/Create Statement parameters but ignored as update data.",
          "properties": {
            
            "audienceupdate": {
              "type": "array",
              "description": "Provide Audience update from JSONPath mapped Value in data file",
              "minLength": 0
            },
            "channelconsent": {
              "type": "array",
              "description": "Provide Channel Consent update from JSONPath mapped Value in data file",
              "minLength": 0
            },
            "contactkey": {
              "type": "string",
              "description": "Provide ContactKey update from JSONPth mapped Value",
              "minLength": 0
            },
            "contactid": {
              "type": "string",
              "description": "Provide ContactId update from JSONPath mapped Value",
              "minLength": 0
            }
          },
          "default": {
            "audienceupdate": [
              {"AudienceX1": "$.audienceColumn1"},
              {"AudienceX2": "$.audienceColumn2"}
            ],
            "channelconsent": [
              {"EMAIL": "$.audienceColumn1"},
              {"SMS":   "$.audienceColumn2"}
            ],
            "contactkey": "",
            "contactid": ""
          }
        },

        "csvmap": {
          "type": "object",
          "description": "Optional. Write a New Column with the value from the Column of the CSV data. Ie. Replace 'Col1' with the name of the New Column and specify the Column in the data to use as the value of the New Column ('Street1': 'StreetAddress1' creates a new Column Street1 with the value of StreetAddress1).  Leave value(s) empty to not apply the transform.",
          "properties": {
            "Col1": {
              "type": "string",
              "description": "Write a New Column with the value from the Column of the CSV data. Ie. Replace 'Col1' with the name of the New Column and specify the Column in the data to use as the value of the New Column ('Street1': 'StreetAddress1' creates a new Column Street1 with the value of StreetAddress1). Leave value(s) empty to not apply the transform. ",
              "minLength": 1
            },
            "Col2": {
              "type": "string",
              "minLength": 1
            }
          },
          "default": {
            "Col1": "",
            "Col2": ""
          }
        },
        "ignore": {
          "type": "array",
          "description": "Optional. Ignore a Column in the data, effectively remove the Column from the data. Ie. 'Col1' will remove the Column Col1 from the data. This action is always performed last so that previous Transformations adding columns can have the source columns removed from the data.  Leave value(s) empty to not apply the transform.",
          "items": {
            "properties": {
              "Col1": {
                "type": "string",
                "minLength": 1
              },
              "Col2": {
                "type": "string",
                "minLength": 1
              }
            }
          },
          "default": [
            {
              "Col1": "",
              "Col2": ""
            }
          ]
        }
      }
    }
  }
}